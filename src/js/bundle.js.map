{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAa;AAC2B;AACxqDAAa;AACrB;AACA;AACA;;;;;;;;;;;;;;;;AC/Ga;AAC2B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,kBAAkB;AAClB;AACA;AACA,gBAAgB,qDAAa;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,qDAAa;AAC7B;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,qDAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9Ha;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC3CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNa;AACb;AAC4C;AACI;AACC;AACjD;AACA;AACA;AACA,kCAAkC,8DAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2DAAW;AACf,IAAI,+DAAW;AACf,CAAC,C","sources":["webpack://pomodoroproject/./src/js/modules/timer.js","webpack://pomodoroproject/./src/js/modules/todo_list.js","webpack://pomodoroproject/./src/js/modules/tools.js","webpack://pomodoroproject/webpack/bootstrap","webpack://pomodoroproject/webpack/runtime/define property getters","webpack://pomodoroproject/webpack/runtime/hasOwnProperty shorthand","webpack://pomodoroproject/webpack/runtime/make namespace object","webpack://pomodoroproject/./src/js/index.js"],"sourcesContent":["\"use strict\";\r\nimport { saveToStorage } from \"./tools\";\r\n\r\nfunction manageTimer(selector, globalSettingsAndVars, pomoCounterSelector) {\r\n\r\n    const parentSelector = document.querySelector(selector),\r\n          timerDisplay = parentSelector.querySelector(\".timer span\"),\r\n          timerBtn = parentSelector.querySelector(\".start-btn button\"),\r\n          timerOpts = parentSelector.querySelectorAll('.timer-btns .timer-btn-item'),\r\n          pomoCounter = document.querySelectorAll(pomoCounterSelector)[1];\r\n    let timerDuration;\r\n    let intervalID;\r\n    let currentOption;\r\n\r\n    setTimer(timerOpts);\r\n    updatePomoCounter();\r\n\r\n    // Adding event listeners for timer options\r\n    timerOpts.forEach((item, index, arr) => {\r\n        item.addEventListener(\"click\", (e) => {\r\n            clearActive(arr);\r\n            item.classList.add('active');\r\n            setTimer(arr);\r\n        })\r\n    })\r\n\r\n    // Adding event listener to button\r\n    timerBtn.addEventListener(\"click\", manageStartBtn);\r\n\r\n\r\n    // Utility functions\r\n    function setTimer(items) {\r\n        items.forEach(item => {\r\n            if (item.classList.contains(\"active\")) {\r\n                timerDuration = globalSettingsAndVars.timerValues[item.id];\r\n                currentOption = item.id;\r\n                timerDisplay.innerHTML = convertTime2ProperFormat(timerDuration);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function clearActive(items) {\r\n        items.forEach(item => {\r\n            item.classList.remove('active');\r\n        })\r\n    }\r\n\r\n\r\n    function manageStartBtn() {\r\n        const btnText = timerBtn.textContent;\r\n\r\n        if (btnText === 'START') {\r\n            timerBtn.textContent = 'CANCEL';\r\n            disableTimerOptions(timerOpts);\r\n            startTimer();\r\n            timerBtn.classList.add(\"active\");\r\n        } else {\r\n            timerBtn.textContent = 'START';\r\n            enableTimerOptions(timerOpts);\r\n            clearInterval(intervalID);\r\n            timerBtn.classList.remove(\"active\");                \r\n            setTimer(timerOpts);\r\n        }\r\n    }\r\n\r\n\r\n    function disableTimerOptions(items) {\r\n        items.forEach(item => {\r\n            item.disabled = true;\r\n            item.classList.add('disabled');\r\n        })\r\n    }\r\n\r\n\r\n    function enableTimerOptions(items) {\r\n        items.forEach(item => {\r\n            item.disabled = false;\r\n            item.classList.remove('disabled');\r\n        })\r\n    }\r\n\r\n\r\n    function startTimer() {\r\n        intervalID = setInterval(function() {\r\n            timerDuration--;\r\n            timerDisplay.innerHTML = convertTime2ProperFormat(timerDuration);\r\n            if (timerDuration === 0) {\r\n                (currentOption === 'pomo') ? updatePomoCounter(1) : '';\r\n                manageStartBtn();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    function convertTime2ProperFormat(sec) {\r\n        let minutes = Math.floor(sec / 60);\r\n        let seconds = sec % 60;\r\n\r\n        minutes < 10 ? minutes = '0' + minutes : minutes = minutes + '';\r\n        seconds < 10 ? seconds = '0' + seconds : seconds = seconds + '';\r\n        return minutes + \":\" + seconds;\r\n    }\r\n\r\n\r\n    function updatePomoCounter(step = 0) {\r\n        globalSettingsAndVars.stats.total_pomos += step;\r\n        pomoCounter.textContent = globalSettingsAndVars.stats.total_pomos;\r\n        saveToStorage(globalSettingsAndVars);\r\n    }\r\n}   \r\n\r\nexport {manageTimer};","\"use strict\";\r\nimport { saveToStorage } from \"./tools\";\r\n\r\nfunction manageTasks(taskListSelector, addBtnSelector, modalSelector, taskCounterSelector, globalSettingsAndVars) {\r\n    const todoListContainer = document.querySelector(taskListSelector),\r\n          taskList = todoListContainer.querySelector(\".task-list\"),\r\n          addBtn = document.querySelector(addBtnSelector),\r\n          modalWrapper = document.querySelector(modalSelector),\r\n          taskCounter = document.querySelectorAll(taskCounterSelector)[1];\r\n    \r\n    updateTaskList();\r\n    manageTaskAddition();\r\n    \r\n\r\n    function updateTaskList() {\r\n        taskList.innerHTML = '';\r\n        globalSettingsAndVars.tasks.forEach(task => {\r\n            taskList.append(createListItem(task));\r\n        })\r\n        updateTaskCounter();\r\n        manageTaskListeners();\r\n    }\r\n\r\n    function createListItem(task) {\r\n        const elem = document.createElement(\"li\"),\r\n              span = document.createElement('span'),\r\n              btnDiv = document.createElement('div'),\r\n              completeBtn = document.createElement(\"button\"),\r\n              delBtn = document.createElement('button');\r\n\r\n        elem.classList.add(\"task-list-item\");\r\n        btnDiv.classList.add(\"task-control-btns\");\r\n        completeBtn.classList.add(\"task-complete-btn\");\r\n        completeBtn.innerHTML = \"&#9989;\";\r\n        delBtn.classList.add(\"task-delete-btn\");\r\n        delBtn.innerHTML = \"&#10060\";\r\n        \r\n        // Adding classes for completed tasks\r\n        if (task.isFinished) {\r\n            elem.classList.add(\"task-finished\");\r\n            completeBtn.classList.add(\"active\");\r\n        } else {\r\n            elem.classList.remove(\"task-finished\");\r\n            completeBtn.classList.remove(\"active\");\r\n        }\r\n        span.textContent = task.text;\r\n        \r\n        // Creating our element\r\n        btnDiv.append(completeBtn);\r\n        btnDiv.append(delBtn);\r\n        elem.append(span);\r\n        elem.append(btnDiv);\r\n        return elem; \r\n    }\r\n\r\n    function manageTaskListeners() {\r\n        const completeBtns = taskList.querySelectorAll(\".task-control-btns .task-complete-btn\"),\r\n              deleteBtns = taskList.querySelectorAll('.task-control-btns .task-delete-btn');\r\n\r\n        completeBtns.forEach((btn, index) => {\r\n            btn.addEventListener('click', (event) => {\r\n                if (btn.classList.contains(\"active\")) {    // if it was in completed state\r\n                    globalSettingsAndVars.tasks[index].isFinished = false;\r\n                } else {\r\n                    globalSettingsAndVars.tasks[index].isFinished = true;\r\n                }\r\n                saveToStorage(globalSettingsAndVars);\r\n                updateTaskList();\r\n            })\r\n        })\r\n\r\n        deleteBtns.forEach((btn, index) => {\r\n            btn.addEventListener(\"click\", () => {\r\n                globalSettingsAndVars.tasks.splice(index, 1);\r\n                saveToStorage(globalSettingsAndVars);\r\n                updateTaskList();\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    function manageTaskAddition() {\r\n        const modalContent = modalWrapper.querySelector(\".task-add-content\"),\r\n              createBtn = document.querySelector(\"#task-add-btn-submit\"),\r\n              inputField = document.querySelector(\"#task-add-content-input\");\r\n\r\n        addBtn.addEventListener(\"click\", () => {\r\n            modalWrapper.classList.remove('hide');\r\n            modalContent.classList.remove('hide');\r\n        })\r\n\r\n        modalWrapper.addEventListener(\"click\", (e) => {\r\n            if (e.target.classList.contains(\"task-add-wrapper\") || e.target.id === \"task-add-btn-cancel\") {\r\n                modalWrapper.classList.add('hide');\r\n                modalContent.classList.add('hide');\r\n            }\r\n        })\r\n\r\n        createBtn.addEventListener(\"click\", () => {\r\n            addTask2List();\r\n        })\r\n\r\n        document.addEventListener(\"keydown\", (event) => {\r\n            if (event.key === 'Enter' && !modalWrapper.classList.contains('hide')) {\r\n                addTask2List();\r\n            }\r\n        })\r\n\r\n        function addTask2List() {\r\n            globalSettingsAndVars.tasks.push({\r\n                text: inputField.value,\r\n                isFinished: false,\r\n            })\r\n            modalWrapper.classList.add('hide');\r\n            modalContent.classList.add('hide');\r\n            inputField.value = '';\r\n            saveToStorage(globalSettingsAndVars);\r\n            updateTaskList();\r\n            updateTaskCounter();\r\n        }\r\n    }\r\n\r\n    function updateTaskCounter() {\r\n            taskCounter.innerHTML = globalSettingsAndVars.tasks.length;\r\n    }\r\n}\r\n\r\nexport {manageTasks};","\"use strict\";\r\n\r\n    // Working with localStorage\r\n    function loadGlobalVars()  {\r\n        if (localStorage.getItem('globalSettingsAndVars') !== null) {\r\n            return JSON.parse(localStorage.getItem('globalSettingsAndVars'));\r\n        } else {\r\n    \r\n            let obj = {\r\n                timerValues: {\r\n                    pomo: 3,\r\n                    short: 300,\r\n                    long: 1800,\r\n                },\r\n                stats: {\r\n                    total_pomos: 0,\r\n                    total_tasks: 0,\r\n                },\r\n                tasks: [\r\n                    {\r\n                        text: 'Finish project',\r\n                        isFinished: false,\r\n                    },\r\n                    {\r\n                        text: 'Read articles',\r\n                        isFinished: false,\r\n                    },\r\n                    {\r\n                        text: 'Read articles',\r\n                        isFinished: false,\r\n                    }\r\n                ]\r\n            }\r\n            saveToStorage(obj);\r\n            return obj;\r\n    \r\n        }\r\n    }\r\n\r\n    function saveToStorage(obj) {\r\n        localStorage.setItem(\"globalSettingsAndVars\", JSON.stringify(obj));\r\n    }\r\n\r\n    export {loadGlobalVars, saveToStorage};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\r\n\r\nimport {manageTimer} from \"./modules/timer\";\r\nimport {manageTasks} from \"./modules/todo_list\";\r\nimport { loadGlobalVars } from \"./modules/tools\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n    const globalSettingsAndVars = loadGlobalVars();\r\n    \r\n\r\n\r\n\r\n    \r\n    // Imported functionality\r\n    manageTimer('.tools', globalSettingsAndVars, \".control-stats .control-stats-wrapper .total-pomos span\");\r\n    manageTasks(\".todo-list\", \".btn-add-task\", \".task-add-wrapper\", \".total-tasks span\", globalSettingsAndVars);\r\n})"],"names":[],"sourceRoot":""}