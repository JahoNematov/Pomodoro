{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC9GA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNa;AACb;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2DAAW;AACf,CAAC,C","sources":["webpack://pomodoroproject/./src/js/modules/timer.js","webpack://pomodoroproject/webpack/bootstrap","webpack://pomodoroproject/webpack/runtime/define property getters","webpack://pomodoroproject/webpack/runtime/hasOwnProperty shorthand","webpack://pomodoroproject/webpack/runtime/make namespace object","webpack://pomodoroproject/./src/js/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nfunction manageTimer(selector, globalSettingsAndVars, pomoCounterSelector) {\r\n\r\n    const parentSelector = document.querySelector(selector),\r\n          timerDisplay = parentSelector.querySelector(\".timer span\"),\r\n          timerBtn = parentSelector.querySelector(\".start-btn button\"),\r\n          timerOpts = parentSelector.querySelectorAll('.timer-btns .timer-btn-item'),\r\n          pomoCounter = document.querySelectorAll(pomoCounterSelector)[1];\r\n    let timerDuration;\r\n    let intervalID;\r\n    let currentOption;\r\n\r\n    setTimer(timerOpts);\r\n    updatePomoCounter();\r\n\r\n    // Adding event listeners for timer options\r\n    timerOpts.forEach((item, index, arr) => {\r\n        item.addEventListener(\"click\", (e) => {\r\n            clearActive(arr);\r\n            item.classList.add('active');\r\n            setTimer(arr);\r\n        })\r\n    })\r\n\r\n    // Adding event listener to button\r\n    timerBtn.addEventListener(\"click\", manageStartBtn);\r\n\r\n\r\n    // Utility functions\r\n    function setTimer(items) {\r\n        items.forEach(item => {\r\n            if (item.classList.contains(\"active\")) {\r\n                timerDuration = globalSettingsAndVars.timerValues[item.id];\r\n                currentOption = item.id;\r\n                timerDisplay.innerHTML = convertTime2ProperFormat(timerDuration);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function clearActive(items) {\r\n        items.forEach(item => {\r\n            item.classList.remove('active');\r\n        })\r\n    }\r\n\r\n\r\n    function manageStartBtn() {\r\n        const btnText = timerBtn.textContent;\r\n\r\n        if (btnText === 'START') {\r\n            timerBtn.textContent = 'CANCEL';\r\n            disableTimerOptions(timerOpts);\r\n            startTimer();\r\n            timerBtn.classList.add(\"active\");\r\n        } else {\r\n            timerBtn.textContent = 'START';\r\n            enableTimerOptions(timerOpts);\r\n            clearInterval(intervalID);\r\n            timerBtn.classList.remove(\"active\");                \r\n            setTimer(timerOpts);\r\n        }\r\n    }\r\n\r\n\r\n    function disableTimerOptions(items) {\r\n        items.forEach(item => {\r\n            item.disabled = true;\r\n            item.classList.add('disabled');\r\n        })\r\n    }\r\n\r\n\r\n    function enableTimerOptions(items) {\r\n        items.forEach(item => {\r\n            item.disabled = false;\r\n            item.classList.remove('disabled');\r\n        })\r\n    }\r\n\r\n\r\n    function startTimer() {\r\n        intervalID = setInterval(function() {\r\n            timerDuration--;\r\n            timerDisplay.innerHTML = convertTime2ProperFormat(timerDuration);\r\n            if (timerDuration === 0) {\r\n                (currentOption === 'pomo') ? updatePomoCounter(1) : '';\r\n                manageStartBtn();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    function convertTime2ProperFormat(sec) {\r\n        let minutes = Math.floor(sec / 60);\r\n        let seconds = sec % 60;\r\n\r\n        minutes < 10 ? minutes = '0' + minutes : minutes = minutes + '';\r\n        seconds < 10 ? seconds = '0' + seconds : seconds = seconds + '';\r\n        return minutes + \":\" + seconds;\r\n    }\r\n\r\n\r\n    function updatePomoCounter(step = 0) {\r\n        globalSettingsAndVars.stats.total_pomos += step;\r\n        pomoCounter.textContent = globalSettingsAndVars.stats.total_pomos;\r\n        localStorage.setItem('globalSettingsAndVars', JSON.stringify(globalSettingsAndVars));\r\n    }\r\n}   \r\n\r\nexport {manageTimer};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\r\n\r\nimport {manageTimer} from \"./modules/timer\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n    const globalSettingsAndVars = loadGlobalVars();\r\n\r\n    function loadGlobalVars()  {\r\n        if (localStorage.getItem('globalSettingsAndVars') !== null) {\r\n            return JSON.parse(localStorage.getItem('globalSettingsAndVars'));\r\n        } else {\r\n    \r\n            let obj = {\r\n                timerValues: {\r\n                    pomo: 3,\r\n                    short: 3,\r\n                    long: 1800,\r\n                },\r\n                stats: {\r\n                    total_pomos: 0,\r\n                    total_tasks: 0,\r\n                }\r\n            }\r\n    \r\n            localStorage.setItem(\"globalSettingsAndVars\", JSON.stringify(obj));\r\n            return obj;\r\n    \r\n        }\r\n    }\r\n    \r\n    // Imported functionality\r\n    manageTimer('.tools', globalSettingsAndVars, \".control-stats .control-stats-wrapper .total-pomos span\");\r\n})"],"names":[],"sourceRoot":""}